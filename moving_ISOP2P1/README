在ISO P2-P1混合元空间中尝试加入移动网格策略. 为简化起见, 只在P网格上求
解粘性Burgers方程. 但包持V网格的同步更新.

主要思路:

1. 在P网格上发展一步方程; 

2. 称类自身继承自MovingMesh2D的网格为参考网格, 它和P网格完全同构, 并应
当始终保持这种同构关系;

3. 先将参考网格同步至P网格(这一步是当网格分几步移动时, 保持P网格和参考
网格一致, 是解决历史问题). 然后在P网格上, 构建monitor, 并据此计算出参考
网格移动方向向量, 它同时也是P网格的移动方向向量; (注意实际上P网格没有同
步到最新, 而是留待下一个monitor或移动结束时更新.)

4. 先更新P空间全部自由度插值节点. 在P网格上, 直接调用参考网格的网格移动
向量更新数值解;

5. 参考网格的移动更新是内置的. 而P网格的移动更新需要手工施加, 就是程序
中的syncMesh(); 即把参考网格更新到P网格. 而这里通过更新P网格中点, 顺带
更新了V网格;

进一步的思路:

对于NS方程的求解:

1. 在P-V网格上发展一步方程; 

2. 先将参考网格同步至P网格. 并更新V网格(注意这也是解决上一步的遗留问题).
然后在P网格上, 构建monitor, 并据此计算出参考网格移动方向向量, 它同时也
是P网格的移动方向向量; 同时计算V网格的更新和移动向量.

3. 先更新P-V空间全部自由度插值节点. 然后在V网格上, 调用V网格的网格移动
向量更新数值解, 并保证质量守恒;

4. 把参考网格更新到P网格. 而这里通过更新P网格中点, 顺带更新了V网格;

总结: 整个思路是实际移动的是P网格, 但更新的是V解. V网格在此过程中和P网
格保持嵌套.
 
